---
name: üçè Package for iOS
on:
  push:
    branches:
      - master
      - release-**
      - vcpkg_ios
  pull_request:
  release:
    types: ['published', 'released']


jobs:
  build:
    runs-on: macOS-latest

    strategy:
      fail-fast: true
      matrix:
        include:
          - triplet: 'arm64-ios'

    env:
      SDK_VERSION: '140'
      DEPLOYMENT_TARGET: '12.0'
      PLATFORM: 'OS64'
      QT_VERSION: '5.15.2'
      BUILD_TYPE: 'Release'
      BITCODE: 'FALSE'

    steps:
      - name: üê£ Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: üåæ Prepare vars
        id: vars
        shell: bash
        run: |
          ./scripts/ci/env_gh.sh

          BUILD_ROOT="/home/runner"
          echo "::set-output name=MONO::mono"
          echo "::set-output name=OVERLAY::vcpkg/overlay_system_qt"
          echo "::set-output name=PATHCONVERT::echo"
          echo "::set-output name=INSTALL_QT::true"
          echo "::set-output name=QT_TARGET::ios"

          echo "::set-output name=VCPKG_ROOT::${BUILD_ROOT}/src"
          echo "::set-output name=BUILD_TYPE::Release"
          echo "::set-output name=BUILD_ROOT::${BUILD_ROOT}"

          echo "VCPKG_ROOT=${BUILD_ROOT}/src" >> $GITHUB_ENV
          echo "CMAKE_BUILD_DIR=${BUILD_ROOT}/builddir" >> $GITHUB_ENV
          echo "VCPKG_DEFAULT_BINARY_CACHE=${BUILD_ROOT}/vcpkg_cache" >> $GITHUB_ENV

      - name: üê© Install CMake and Ninja
        uses: lukka/get-cmake@latest

      - name: üì™ Clone vcpkg
        shell: bash
        run: |
          VCPKG_SHA=$(head -1 .git/modules/vcpkg/HEAD)
          mkdir -p "${{ env.VCPKG_DEFAULT_BINARY_CACHE }}"
          mkdir -p "${{ steps.vars.outputs.VCPKG_ROOT }}"
          cd "${{ steps.vars.outputs.VCPKG_ROOT }}"
          git init
          git remote add origin https://github.com/microsoft/vcpkg.git
          git fetch --depth 1 origin $VCPKG_SHA
          git checkout FETCH_HEAD

      - name: üì´ Cache vcpkg
        id: cache-vcpkg-tool
        uses: pat-s/always-upload-cache@v2.1.5
        with:
          path: |
            ${{ steps.vars.outputs.VCPKG_ROOT }}/vcpkg
            ${{ steps.vars.outputs.VCPKG_ROOT }}/vcpkg.exe
          key: ${{ runner.os }}-${{ hashFiles('.git/modules/vcpkg/HEAD') }}-x

      - name: üì¨ Bootstrap vcpkg
        if: steps.cache-vcpkg-tool.outputs.cache-hit != 'true'
        shell: bash
        working-directory: ${{ steps.vars.outputs.VCPKG_ROOT }}
        run: |
          if grep -qEi "(Microsoft|WSL)" /proc/version &> /dev/null ; then
            ./bootstrap-vcpkg.bat
          else
            ./bootstrap-vcpkg.sh
          fi

      - name: üîê Setup NuGet Credentials
        shell: bash
        run: |
          ${{ steps.vars.outputs.VCPKG_ROOT }}/vcpkg fetch nuget
          ${{ steps.vars.outputs.MONO }} $(${{ steps.vars.outputs.VCPKG_ROOT }}/vcpkg fetch nuget | tail -n 1) \
          sources add \
          -source "https://nuget.pkg.github.com/opengisch/index.json" \
          -storepasswordincleartext \
          -name "GitHub" \
          -username "opengisch" \
          -password "${{ secrets.GITHUB_TOKEN }}"

          ${{ steps.vars.outputs.MONO }} $(${{ steps.vars.outputs.VCPKG_ROOT }}/vcpkg fetch nuget | tail -n 1) \
          setapikey ${{ secrets.GITHUB_TOKEN }} -src "https://nuget.pkg.github.com/opengisch/index.json"

      - name: üî• Free additional space
        run: |
          df -h
          sudo rm -rf /usr/share/dotnet/sdk
          sudo rm -rf /usr/share/rust
          sudo rm -rf /usr/share/swift
          sudo apt remove llvm-* ghc-* google-chrome-* dotnet-sdk-* azure-cli google-cloud-sdk google-chrome-stable firefox
          dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -n | tail -n 100
          du -a /usr/share | sort -n -r | head -n 10
          du -a /usr/local/share | sort -n -r | head -n 10
          df -h
          sudo apt clean
          df -h

      - name: üíê Install Qt
        if: ${{ steps.vars.outputs.INSTALL_QT }}
        uses: jurplel/install-qt-action@v2
        with:
          version: 5.14.2
          modules: 'qtcharts'
          target: ${{ steps.vars.outputs.QT_TARGET }}

      - uses: Apple-Actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.IOS_CERTIFICATES_FILE_BASE64 }}
          p12-password: ${{ secrets.IOS_CERTIFICATES_PASSWORD }}

      - uses: Apple-Actions/download-provisioning-profiles@v1
        with:
          bundle-id: ch.opengis.qfield
          issuer-id: ${{ secrets.IOS_APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.IOS_APPSTORE_KEY_ID }}
          api-private-key: ${{ secrets.IOS_APPSTORE_PRIVATE_KEY }}

      # transifex-client is not compatible with py >= 3.10
      # temporary band aid
      - uses: actions/setup-python@v2
        with:
          python-version: '3.9'


      - name: üåç Pull Translations
        shell: bash
        env:
          TX_TOKEN: ${{ secrets.TX_TOKEN }}
        run: |
          if [[ -z "${TX_TOKEN}" ]]; then
            echo "TX_TOKEN not set, skip tx pull"
          else
            pip install transifex-client
            pushd "${{ steps.vars.outputs.VCPKG_ROOT }}"
            ./vcpkg integrate install
            popd
            ./scripts/ci/pull_translations.sh
          fi

      - name: üå± Install dependencies and generate project files
        shell: bash
        env:
          WORKSPACE: ${{ github.workspace }}
          VCPKG_BINARY_SOURCES: 'clear;nuget,GitHub,readwrite'
          Qt5Core_ROOT: ${{ env.Qt5_DIR }}
        run: |
          # Convert paths to bash compatible ones. Thanks to whoever decided to use drive letters and backslashes.
          CMAKE_BUILD_DIR=$( ${{ steps.vars.outputs.PATHCONVERT }} "${CMAKE_BUILD_DIR}" )
          VCPKG_ROOT=$( ${{ steps.vars.outputs.PATHCONVERT }} "${VCPKG_ROOT}" )
          SOURCE_DIR=$( ${{ steps.vars.outputs.PATHCONVERT }} "${WORKSPACE}" )

          source ./scripts/version_number.sh
          source ./scripts/ci/generate-version-details.sh

          overlay_ports=(${WORKSPACE}/vcpkg/overlay_system_qt ${WORKSPACE}/vcpkg/overlay)
          echo "Building with $(IFS=\; ; echo "${overlay_ports[*]}")"
          cmake -S "${SOURCE_DIR}" \
                -B "${CMAKE_BUILD_DIR}" \
                -G Ninja \
                -DCMAKE_BUILD_TYPE=${{ steps.vars.outputs.BUILD_TYPE }} \
                -DCMAKE_TOOLCHAIN_FILE="${VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake" \
                -DVCPKG_OVERLAY_PORTS=$(IFS=\; ; echo "${overlay_ports[*]}") \
                -DVCPKG_TARGET_TRIPLET="${{ matrix.triplet }}" \
                -DWITH_VCPKG=ON \
                -DWITH_SPIX=ON \
                -DAPP_VERSION="${APP_VERSION}" \
                -DAPP_VERSION_STR="${APP_VERSION_STR}" \
                -DAPP_PACKAGE_NAME="${APP_PACKAGE_NAME}" \
                -DDEPLOYMENT_TARGET=${{ env.DEPLOYMENT_TARGET }} \
                -DFORCE_STATIC_LIBS=TRUE \
                -DPLATFORM=${{ env.PLATFORM }} \
                -DENABLE_VISIBILITY=FALSE \
                -DENABLE_BITCODE=${{ env.BITCODE }} \
                -DENABLE_ARC=TRUE \
                -DQT_IOS_TEAM_ID=${{ secrets.IOS_TEAM_ID }} \
                -DQT_IOS_CODE_SIGN_IDENTITY=${{ secrets.IOS_CODE_SIGN_IDENTITY }} \
                -DQT_IOS_PROVISIONING_PROFILE_SPECIFIER=${{ secrets.IOS_PROVISIONING_PROFILE_SPECIFIER }} \
                -DENABLE_TESTS=OFF \
                ${EXTRA_CMAKE_ARGS}

      - name: üìë Upload Dep Build Logs
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: build-logs-${{ matrix.triplet }}
          path: ${{ steps.vars.outputs.VCPKG_ROOT }}/buildtrees/**/*.log

      - name: üåã Build
        run: |
          cmake --build "${{ env.CMAKE_BUILD_DIR }}" --config ${{ steps.vars.outputs.BUILD_TYPE }} # --target qfield

